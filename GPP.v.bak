module gppFibo (CLOCK_50,SW,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7,rst_);

   input CLOCK_50,rst_;
   input [0:0]SW;
   output [0:6] HEX0,HEX1,HEX2,HEX7; //OutData,n or m or o 

   reg [25:0]count; 

   wire [7:0] ALUresult; 
   wire [7:0] RFr1, RFr2, RFr3;
   wire [3:0] pc, state; 
   

   assign clk = count[25]; 
   assign clk1 = CLOCK_50; 
   assign Start = SW[0];
   
   always @(posedge clk1)
      count = count+1; 
  
 
   // display the data input, data output, and address on the 7-segs

   hex7seg digit0 (RFr3[3:0], HEX0);
   hex7seg digit1 (RFr2[3:0], HEX1);
   hex7seg digit2 (RFr1[3:0], HEX2);
   hex7seg digit7 (state[3:0], HEX7);

   Control_GPP(ld_IR, clr_pc, incr_pc, ld_pc, Mwe, Mre,  RFr1a, RFr1e, RFr2a, RFr2e, RFr3a, RFr3e, set_RF3, clr_RF3, sel_RF, sel_ALU, Start, rst_, SIR, clk);
   Datapath_GPP(ld_IR, clr_pc, incr_pc, ld_pc, RFr1e, RFr2e, RFr3e, set_RF3, clr_RF3, sel_rf, sel_ALU, Start, rst_, clk);


endmodule


module hex7seg (hex, display);
   input [3:0] hex;
   output [0:6] display;

   reg [0:6] display;

   /*
    *       0  
    *      ---  
    *     |   |
    *    5|   |1
    *     | 6 |
    *      ---  
    *     |   |
    *    4|   |2
    *     |   |
    *      ---  
    *       3  
    */
   always @ (hex)
      case (hex)
         4'h0: display = 7'b0000001;
         4'h1: display = 7'b1001111;
         4'h2: display = 7'b0010010;
         4'h3: display = 7'b0000110;
         4'h4: display = 7'b1001100;
         4'h5: display = 7'b0100100;
         4'h6: display = 7'b0100000;
         4'h7: display = 7'b0001111;
         4'h8: display = 7'b0000000;
         4'h9: display = 7'b0000100;
         4'hA: display = 7'b0001000;
         4'hb: display = 7'b1100000;
         4'hC: display = 7'b0110001;
         4'hd: display = 7'b1000010;
         4'hE: display = 7'b0110000;
         4'hF: display = 7'b0111000;
      endcase
endmodule


module Control_GPP(ld_IR, clr_pc, incr_pc, ld_pc, Mwe, RFr1a, RFr1e, RFr2a, RFr2e, RFr3a, RFr3e, set_RF3, clr_RF3, sel_rf, sel_ALU, Start, rst_, clk);

   output reg   clr_pc, incr_pc, ld_pc;
   output reg   m_r_e, Mwe, RFr1a, RFr1e, RFr2a, RFr2e, RFr3e, RFr3a, set_RF3, clr_RF3, sel_RF, sel_ALU;
   output reg   [15:0] MAresult;
   input   Start, rst_, clk;
   input  [15:0] ALUresult;
   
   
   reg ld_ir;
   reg [3:0] state, next_state;
   reg [1:0] IR;
   parameter    S_0 = 4'b0000, S_1 = 4'b0001, S_2 = 4'b0010, S_3 = 4'b0011,
                S_4 = 4'b0100, S_5 = 4'b0101, S_6 = 4'b0110;   // State codes

   always @ (posedge clk, negedge rst_)   
   if(rst_==0) state<=S_0; else state <= next_state;  


   
   always @ (state, Start, IR)    
    begin
   next_state=S_0;
   case(state)
      S_0: if(Start) next_state=S_1; else next_state=S_0;
      S_1: next_state=S_2;
      S_2: next_state=S_3;
      S_3: if(IR==0) next_state=S_4; else if(IR==1) next_state=S_5; else if(IR==2) next_state=S_6; 
      default: next_state=S_1; 
   endcase
   end
 
   always @ (state, Start, IR, rfn_lt_rfm, rfn_eq_rfm) 
      begin
         clr_pc=0;
         ld_IR=0;
         incr_pc=0;
         RFr1a=0;
         RFr1e=0;
         RFr2a=0;
         RFr2e=0;
         RFr3a=0;
         RFr3e=0;
         set_RF3=0;
         clr_RF3=0;
         Mwe=0;
			Mre=0;
         ld_pc=0;
         incr_pc=0;
         sel_RF=00;
         sel_ALU=00;
   
   case(state)
      S_0: if(Start) clr_pc=1; 
      S_1: begin Mre=1; incr_pc=1; end
      S_2: ld_IR=1;
      S_3: if(IR==0) begin Mwe=1; sel_RF=00; end 
            else if(IR==1) begin RFr1e=1; end 
            else if(IR==2) begin RFr1e=1; end
            else if(IR==3) begin Mwe=1; sel_rf=10; end
            else if(IR==4) begin Mwe=1; sel_rf=01; RFr1e=1; RFr2e=1; RFr3e=1; sel_ALU=00; end
            else if(IR==5) begin Mwe=1; sel_rf=01; RFr1e=1; RFr2e=1; RFr3e=1; sel_ALU=01; end
            else if(IR==6) begin Mwe=1; sel_rf=01; RFr1e=1; RFr2e=1; RFr3e=1; sel_ALU=10; end
            else if(IR==7) begin Mwe=1; sel_rf=01; RFr1e=1; RFr2e=1; RFr3e=1; sel_ALU=11; end
            else if(IR==8) begin RFr1e=1; ld_pc=1; end
            else if(IR==9) if (rfn_eq_rfm)  clr_RF3=1; else set_RF3=1;
            else if(IR==10) if (!rfn_lt_rfm) clr_RF3=1; else set_RF3=1;
      S_4: Mre=1;
      S_5: Mwe=1;
      S_6: Mwe=1;
   endcase
  end

  always @ (sel_ma,pc,RFr1,dir) begin 
case (sel_ma)
2'b00 : MAresult = pc;
2'b01 : MAresult = RFr1;
2'b10 : MAresult = dir;
endcase
end
  
  endmodule

module Datapath_GPP(ld_IR, clr_pc, incr_pc, ld_pc, Mwe, RFr1e, RFr2e, RFr3e, set_RF3, clr_RF3, sel_rf, sel_ALU, Start, rst_, clk);
   input clk, Start, rst_;
   input RFr1e, RFr2e, RFr3e, clr_RF3, set_RF3;   
   input sel_ALU, sel_rf, Mwe;
   input ld_IR, clr_pc, incr_pc, ld_pc;
   
   output wire rfn_eq_rfm, rfn_lt_rfm;
   
   reg [7:0] RFr00, RFr11, RFr22, RFr33, RFr44, RFr55, RFr66, RFr77;
   reg [3:0] ALUresult;
   reg [3:0] RFr1, RFr2, RFr3;
   reg [3:0] pc;
   reg [7:0] RFr1a ,RFr2a ,RFr3a;
   
   (* ram_init_file = "Fibo.mif"*)reg[15:0] memory_array[127:0];
   
   
   // Write(store
   always @(posedge clk)
         if(Mwe)
            begin
               memory_array[ma][7:0] <= memory_array[ma][11:8];              
            end
               
            
   // Read(load
   always @(*) begin
      if(Mre)
         memory_array[ma][11:8] <= memory_array[ma][7:0];   
      end
   end

ma
   
   
always @ (posedge clk) begin
         if (ld_pc) pc <= memory_array[ma][7:0];
         if (clr_pc) pc <= 0;
         if (incr_pc) pc <= pc + 1;
			
if(RFr1e) Rfrla = memory_array[ma][11:8];
if(RFr2e) Rfr2a = memory_array[ma][7:4];
if(RFr3e) Rfr3a = memory_array[ma][3:0];


if(clr_RF3) Rfr3 <= 0; 
if(set_RF3) Rfr3 <= 1; 
			end
			
always@(rfn_eq_rfm,rfn_lt_rfm,RF[n],RF[m])begin
rfn_eq_rfm = (RF[n]==RF[m])? 1'b1:1'b0;			
rfn_lt_rfm = (RF[n]<RF[m])? 1'b1:1'b0; 
end




     
   always @ (sel_ALU,RFr1,RFr2,ALUresult) 
      begin
         case(sel_ALU)
            2'b00 : ALUresult = RFr1 + RFr2;
            2'b01 : ALUresult = RFr1 - RFr2;
            2'b10 : ALUresult = RFr1 / RFr2;
            2'b11 : ALUresult = RFr1 % RFr2;
         endcase
      end
      
      always @ (sel_rf,M[ma],imm,ALUresult) begin 
     case(sel_rf) 
      2'b00 : RFresult = M[ma];
      2'b01 : RFresult = ALUresult;
      2'b10 : RFresult = imm;
      endcase
      end
endmodule


module Memory_GPP()

endmodule
